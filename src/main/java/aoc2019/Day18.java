package aoc2019;

import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;
import java.util.stream.IntStream;

public class Day18 {

    public static void main(String[] args) {
        int part1 = compute(getGrid(input(), false));
        System.out.println("Part 1: " + part1);
        int part2 = compute(getGrid(input(), true));
        System.out.println("Part 2: " + part2);
    }

    private static int compute(Map<Point, Character> grid) {
        Queue<Map<Point, Character>> q = new LinkedList<>();
        Map<Map<Point, Character>, Integer> distances = new HashMap<>();
        q.add(grid);
        distances.put(grid, 0);
        while (!q.isEmpty()) {
            Map<Point, Character> current = q.poll();
            neighboursAndDistances(current).forEach((neighbour, dist) -> {
                int distance = distances.get(current) + dist;
                if (distances.getOrDefault(neighbour, Integer.MAX_VALUE) > distance) {
                    distances.put(neighbour, distance);
                    q.add(neighbour);
                }
            });
        }
        return distances.keySet()
                .stream()
                .filter(map -> IntStream.rangeClosed('a', 'z')
                        .noneMatch(ch -> map.containsValue((char) ch)))
                .mapToInt(distances::get)
                .min()
                .orElseThrow();
    }

    private static @NotNull Map<Map<Point, Character>, Integer> neighboursAndDistances(
            Map<Point, Character> grid) {
        Map<Map<Point, Character>, Integer> grids = new HashMap<>();
        grid.entrySet()
                .stream()
                .filter(ent -> ent.getValue() == '@')
                .map(Map.Entry::getKey)
                .forEach(current -> {
                    for (var entry : grid.entrySet()) {
                        Point p = entry.getKey();
                        final char status = entry.getValue();
                        if (!Character.isLowerCase(status)) {
                            continue;
                        }
                        Integer dist = getDist(current, p, status, grid);
                        if (dist == null) {
                            continue;
                        }
                        Map<Point, Character> newGrid = new HashMap<>();

                        grid.forEach((key, value) -> newGrid.put(key, getChar(status, value)));
                        newGrid.replace(current, '.');
                        newGrid.replace(p, '@');
                        grids.put(newGrid, dist);
                    }
                });
        return grids;
    }

    private static Character getChar(final char status, char value) {
        if (value == status || value == '@') {
            return '@';
        } else if (value == Character.toUpperCase(status)) {
            return '.';
        }
        return value;
    }

    private static Integer getDist(Point start, Point dest, char status,
            Map<Point, Character> grid) {
        Map<Point, Integer> distances = new HashMap<>();
        distances.put(start, 0);
        char upper = Character.toUpperCase(status);
        Queue<Point> q = new LinkedList<>();
        q.add(start);
        while (!q.isEmpty()) {
            Point current = q.poll();
            for (Direction dir : Direction.values()) {
                Point neighbour = dir.move(current);
                char other = grid.getOrDefault(neighbour, '#');
                if (other == '#' || (other != status && other != '.' && Character.isLetter(
                        upper))) {
                    continue;
                }
                int distance = distances.get(current) + 1;
                if (distances.getOrDefault(neighbour, Integer.MAX_VALUE) > distance) {
                    distances.put(neighbour, distance);
                    q.add(neighbour);
                }
            }
        }
        return distances.get(dest);
    }

    private static void printGrid(Map<Point, Character> grid) {
        int minX = grid.keySet().stream().mapToInt(p -> p.x).min().orElse(0);
        int maxX = grid.keySet().stream().mapToInt(p -> p.x).max().orElse(0);
        int minY = grid.keySet().stream().mapToInt(p -> p.y).min().orElse(0);
        int maxY = grid.keySet().stream().mapToInt(p -> p.y).max().orElse(0);
        var builder = new StringBuilder();
        for (int y = minY; y <= maxY; y++) {
            for (int x = minX; x <= maxX; x++) {
                builder.append(grid.get(new Point(x, y)));
            }
            builder.append('\n');
        }
        System.out.println(builder);
    }

    private static Map<Point, Character> getGrid(String input, boolean b) {
        Map<Point, Character> grid = new HashMap<>();
        String[] lines = input.split("\n");
        int px = 0;
        int py = 0;
        for (int y = 0; y < lines.length; y++) {
            String line = lines[y].trim();
            for (int x = 0; x < line.length(); x++) {
                if (line.charAt(x) == '@') {
                    px = x;
                    py = y;
                }
                grid.put(new Point(x, y), line.charAt(x));
            }
        }
        if (b) {
            grid.put(new Point(px, py), '#');
            grid.put(new Point(px - 1, py), '#');
            grid.put(new Point(px + 1, py), '#');
            grid.put(new Point(px, py + 1), '#');
            grid.put(new Point(px, py - 1), '#');
            grid.put(new Point(px - 1, py - 1), '@');
            grid.put(new Point(px + 1, py - 1), '@');
            grid.put(new Point(px - 1, py + 1), '@');
            grid.put(new Point(px + 1, py + 1), '@');
        }
        return grid;
    }

    private static String input() {
        return """
#################################################################################
#.................#...#.#...............#...#.........#.......#.......#.....#...#
#######.#.#######.#.#.#.#.#######.#######.#.#.###.#####.#####.#.#.###C###.#.#.#.#
#.E...#.#.#.....#...#...#.#.....#.......#.#.#t#.#.....#.#...#...#.#.#.#...#.#.#.#
#.###.###.#.###.#######.#.#.###.#######.#.###.#.#####.#.#.#.#####.#.#.#.###.#.#.#
#.#.......#...#...#...#.#.#.#.......#...#.#.........#...#.#.....#f#.....#...#a#.#
#.#########.#.#####.#.#.#.###.#####.#.###.#.#######.#####.#.###.#.#######.###.###
#...#.....#.#.....#.#...#...#.#.....#...#...#...#.#.....#.#...#.#...#h..#...#...#
#.#.#.###.#####.#.#.#######.#.#.#######.#.###.#.#.#####.###.#.#####.#.#.###.###.#
#.#.#...#.....#.#...#...#...#.#...#...#.#...#.#.#.....#...#.#.#.....#.#...#.L.#.#
###.#.#######.#.#####.#.#.###.###.###.#.#####.#.#.###.###.###.#.#####.###.###.#.#
#...#.#...#...#...#...#.#...#...#.....#.#...#.#.#...#.........#.#.......#...#...#
#.###.#.#.#.#####.#.###.###.#.#.#####.#.#.#.#.#.###.###########.#.#####.###.###.#
#.....#.#...#.....#...#...#.#.#.#.....#.#.#...#.#.....#.....#...#...#.#.#...#...#
#.#####.###.#####.###.###.#.###.#.#####.#.#####.#.#####.###.#.#####.#.#.###.#.###
#...#.#...#.#...#.#...#.#.#.#...#.....#.#.#.....#.#.....#...#...#.#.#.#...#.#...#
###.#.###.###.#.###.###.#.#.#.#.#######.#.#.#######.#####.#####.#.#.#.###.#####.#
#.#.....#.....#.....#...#.#...#.#.......#.#.......#...#.#.#.....#.#.#...#.......#
#.#####.#############.#.#.#.#####.#####.#.#######.###.#.#.###.###.#.#.###########
#.....#.#.#...........#.#...#.....#.....#.#...#...#...#.#.....#...#.#...........#
#.#.###.#.#.#.#####.#########.#####.#####.#.#.#.###.###.#.#####.#.#.###.#########
#.#.#...#...#.....#.#.......#.#.........#...#.#.....#.....#.X.#.#.#...#.#...#...#
###.#.###########.#########.#.#########.#.###.#######.#####.###.#####D#.#.#.#.#.#
#...#.#...........#.......#.#.....#.....#...#...#...#...#.#...#.......#...#...#.#
#.#.#.###.#######.#.#.#.###.#.###.#####.#.#####.###.###.#.###.#######.###.#####.#
#.#.#....k#...#...#.#.#.#...#...#.....#.#.#.....#.....#.#...#.#...V.#...#...#...#
#.#.#########.#.###.#.#.#.#####.#####.###.#.#####.#####.###.#.#.###.###.###.#.###
#.#...#.......#.#...#.#.#...#.......#...#.#.#.....#.....#...#...#...#.#.#.#.#...#
#.###.#.#######.#.###.#####.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.###.#
#...#...#.......#.#.#.....#.#.#.#.......#.#.#...#.#.#.#...#.......#...R.#...#...#
#.#.#####.#######.#.#####.#.#.#.#.#####.###.#.#####.#.#.#.#W#######.#####S###.#.#
#.#......j#...#...#...I.#...#...#.#.....#...#.......#...#.#.#.....#...#.#.#.#.#.#
#.#########.###.###.###.#########.#####.#.#######.#######.#.#.###.###.#.#.#.#.#.#
#.......#.....#.....#.#.#...#.....#...#.#.......#.........#...#.#.#.#.#.#.#.#.#.#
#######.###.#.#######U#.#.#.#.#####.#.#########.###.###########.#.#.#.#.#.#.#.###
#...Y.#...#.#.........#...#.#.......#...#.#...#.#...#.............#.#.#.....#...#
#.#######.#.###.#####.#####.#########.#.#.#.#.#.#####.#############.#.#########B#
#...#.Q...#.#...#.#...#...#.#...#...#.#.#...#.#.......#i..#.....#...#.........#.#
#.#.#.#######.###.#.#####.#.#.#.#.#.###.#.###.#########.#.#.#.###.#.#########.#.#
#.#...........#p..........#...#...#.........#...........#...#.....#...N.........#
#######################################.@.#######################################
#.#.....#.#.........#.........#.....#.......#...#.......#...#.....#...G.....#...#
#.#.#.#.#.#.#####.#.#######.#.#.###.#.###.#.#.#.#.#####.#.###.###.#.#####.#.#.#.#
#...#r#.#.#.#...#n#.........#...#.#.#...#.#.#.#.#...#...#...#.#.#...#...#.#...#.#
#.###.#.#.#.#.###.###############.#.###.#.#.#.#.#.#.#.#####.#.#.#######.#.#####.#
#.#d#.#.#.....#...#.........#.....#.....#.#..m#.#.#.#.....#.#.#.....#...#...#...#
#.#.#.#.#######.#########.###.#.#######.#.#####.#.#.#####.#.#.###.#.#.#####.#.###
#...#.#.#..b....#.....#...#...#.#.....#.#.#...#.#.#.#.......#.....#...#.....#...#
#.###.#.#.#######.###.#.###.###.#.###.#.#.#.#.#.#.#.#################.#.#######.#
#.#...#...#.......#...#.#...#.#...#.#...#.#.#.#.#.#.#.....#.......#...#...#.K.#.#
###.#######.###.###.###.#.###.#####.#####.#.#.#.#.#.#.###.#.#####.#.#####.#.#.#.#
#...#.......#.#...#.....#...#.......#...#.#.#...#.#.#.#.#...#...#.....#...#.#.#.#
#.#####.#####.###.#####.###.###.#.#.###.#.###.#####.#.#.#####.#########.###.###.#
#.#...#..z#.....#...#.#.#.#...#.#.#.....#...#.#.....#.....#...#.........#.....#.#
#.#.#.###.###.#.###.#.#.#.###.###.#####.###.#.#.#.#######.###.#.#########.###.#.#
#.#.#..s#.....#.#...#.......#...#.#.#...#...#...#.#.....#.....#...#.#.....#.#.#.#
#.#.###.#######.#.#############.#.#.#.###.#########.#.#######.###.#.#.#####.#.#.#
#.....#.#.....#.#.............#...#...#.#.M...#.....#...#...#.#...#...#.....#...#
#######.#.###.#######.#####.#.#####.###.#####.#.#######.#.#.#.#.#####.###.#.#####
#...#...#.#.#.......#.....#.#...#...#...#.....#.#.....#.#.#...#.....#.....#...#.#
#O###.###.#.#######.###.###.#####.#####.#.#####.#.###.#.#.#####.###.#########.#.#
#...#.....#.....#...#.#.#...#.....#.....#.....#...#.#.#.#...#.#...#......o#...#.#
###.#########.#.#.#.#.#.#.#.#.#######.#.#####.#####.#.#.###.#.###.#######.#.###J#
#...#.........#.#.#.#.#.#.#.#.#.......#.#.......#.....#.#...#..x#.#.....#.#.....#
#.#.#.#########.#.###.#.#.###.###.#.#####.#####.#.#####.#.#####.#.#.#####.#.#####
#.#...#....g#.#.#.....#.#...#...#.#.....#.....#.#.#...#.....#...#...#.....#.#...#
#.###.#.###.#.#.###########.###.#######.#.###.###.#.#######.#.#####.#.###.###.#.#
#.#.#.#...#.#.................#.#...#...#.#.#.....#.#....v#.#.#.....#.#.#.#...#.#
#.#.#.###.#.###########.#####.#.#.#.#.#.#.#.#######.#.###.###.#.#####.#.#.#.###.#
#.#.#...#.#...F...#.....#...#.#.#.#...#.#.#.....#...#...#.....#.....#.#...#q#.#.#
#.#.###.#.#######.#.#####.#.###.#.#######.###.#.#.#.###.###########.#.#####.#.#.#
#.#...#.#.#...#...#.#...#.#.....#.......#.....#...#.#.#w#.........#.#.....#.#.#.#
#.#.#.#.#.#.#.#.#.###.#.#.#########.###.###########.#.#.#.#.#####.#######.#.#.#.#
#.#.#...#.#.#...#.#...#.#...#.....#...#.#...#.......#.#.#.#.#...#.P.#...#.#...#y#
#.#######.#.#.#####.###.###.#.###.#####.#.###.#######.#.###.#.#.###.#.#.#.#.###.#
#.#.....#.#c#.#...#.#l..#...#...#.#.A.#.#.....#.......#...Z.#.#...#.#.#.#...#...#
#.#.###T#.#.###.#.#.#.###.###.#.#.#.#.#.#.#########.#.###########.#.#.#.#####.###
#.#...#.#.#.....#...#...#.H.#.#.#.#.#...#...#.......#.....#.......#...#.....#..u#
#.###.#.#.#############.###.###.#.#.###.###.###.#########.###.###.#########.###.#
#.....#..........e....#.........#...#...#.......#.............#...........#.....#
#################################################################################""";
    }


}
